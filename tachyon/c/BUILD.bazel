load("@local_config_cuda//cuda:build_defs.bzl", "if_cuda")
load(
    "//bazel:tachyon_cc.bzl",
    "collect_hdrs",
    "tachyon_cc_library",
    "tachyon_cc_shared_library",
    "tachyon_cc_unittest",
)
load("//tachyon/build:version.bzl", "write_version_header")
load(
    ":version.bzl",
    "VERSION",
    "VERSION_MAJOR",
    "VERSION_MINOR",
    "VERSION_PATCH",
    "VERSION_PRERELEASE",
)

package(default_visibility = ["//visibility:public"])

write_version_header(
    name = "version_generated",
    lastchange = "//tachyon/build:lastchange",
    major = VERSION_MAJOR,
    minor = VERSION_MINOR,
    output = "version_generated.h",
    patch = VERSION_PATCH,
    prerelease = VERSION_PRERELEASE,
    project = "TACHYON_C",
)

tachyon_cc_library(
    name = "export",
    hdrs = ["export.h"],
)

tachyon_cc_library(
    name = "version",
    srcs = ["version.cc"],
    hdrs = [
        "version.h",
        ":version_generated",
    ],
    deps = [":export"],
)

TPLS = [
    "//tachyon/c/math/elliptic_curves/{}:msm",
    # Uncomment the following line.
    # See //tachyon/c/math/elliptic_curves/generator:build_defs.bzl
    # "//tachyon/c/math/elliptic_curves/{}:msm_gpu",
]

CURVES = [
    "bls12/bls12_381",
    "bn/bn254",
]

CURVE_DEPS = [tpl.format(curve) for tpl in TPLS for curve in CURVES]

tachyon_cc_shared_library(
    name = "tachyon",
    linkstatic = True,
    soversion = VERSION,
    tags = ["manual"],
    deps = CURVE_DEPS + [
        ":version",
        "//tachyon/c/crypto/random:rng",
        "//tachyon/c/math/elliptic_curves/bn/bn254:msm_gpu",
        "//tachyon/c/zk/plonk/constraint_system:bn254_constraint_system",
        "//tachyon/c/zk/plonk/halo2:bn254_transcript",
    ] + if_cuda([
        "@local_config_cuda//cuda:cudart_static",
    ]),
)

collect_hdrs(
    name = "tachyon_hdrs",
    hdrs = [
        "api.h",
        "export.h",
        "version.h",
    ],
    deps = [
        "//tachyon/c/crypto:crypto_hdrs",
        "//tachyon/c/math:math_hdrs",
        "//tachyon/c/zk:zk_hdrs",
    ],
)

tachyon_cc_unittest(
    name = "c_unittests",
    srcs = [
        "version_unittest.cc",
    ],
    deps = [
        ":version",
        "@com_google_absl//absl/strings",
    ],
)
